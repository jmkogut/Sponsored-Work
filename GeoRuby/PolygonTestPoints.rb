require 'rubygems'
require 'geo_ruby'

module GeoRuby
	module SimpleFeatures
		class Polygon < Geometry
			# This checks the first ring, not all rings. It can be easily adapted to
			# loop through each ring and only return true if one or more contain the point
			def contains(point_to_check)
				c = 0
				ring = rings[0]
				last = ring[ring.length-1]
				ring.points.each do |point|
					if (point.y>point_to_check.y) != (last.y>point_to_check.y)
						c += 1 if point_to_check.x < (last.x-point.x) * (point_to_check.y-point.y) / (last.y/point.y) + point.x
					end
					last = point
				end
				((c%2) == 1) 
			end
		end
	end
end


poly_points = [[-95.81394, 41.008889], [-95.8103490000001, 41.0089209999999], [-95.8109810000001, 41.0072869999999], [-95.8113760000001, 41.00503], [-95.812187, 41.0017499999999], [-95.818804, 41.0017539999999], [-95.8187930000001, 41.0031709999998], [-95.8186090000002, 41.0038159999999], [-95.8186070000002, 41.008026], [-95.8185370000001, 41.008341], [-95.8183790000001, 41.008529], [-95.8181140000002, 41.008707], [-95.8178770000002, 41.0088039999998], [-95.817137, 41.00881], [-95.8158390000001, 41.0088089999999], [-95.815024, 41.0088289999999], [-95.8146770000001, 41.008836], [-95.8141700000001, 41.0089859999998], [-95.81394, 41.008889]]

in_points = [[-95.8169174194336, 41.0077548921441], [-95.8169174194336, 41.0065242578572], [-95.8161449432373, 41.0053259865994], [-95.8147716522217, 41.0043543993136], [-95.8134412765503, 41.0042248532598], [-95.8128833770752, 41.0051316702882], [-95.812668800354, 41.0062327884756], [-95.8130550384521, 41.0073015032386], [-95.8149433135986, 41.0080787394523], [-95.8169174194336, 41.0077548921441], [-95.8176898956299, 41.0056498458448], [-95.8179044723511, 41.0042572397971], [-95.8179044723511, 41.0032856367545], [-95.817174911499, 41.0025731187526], [-95.8152008056641, 41.0024111817688], [-95.8140420913696, 41.0028322170991], [-95.81627368927, 41.0046134906571], [-95.8176898956299, 41.0056498458448], [-95.8176898956299, 41.0056498458448], [-95.8179044723511, 41.0042572397971], [-95.8179044723511, 41.0032856367545], [-95.817174911499, 41.0025731187526], [-95.8152008056641, 41.0024111817688], [-95.8140420913696, 41.0028322170991], [-95.81627368927, 41.0046134906571], [-95.8176898956299, 41.0056498458448], [-95.8176898956299, 41.0056498458448], [-95.8179044723511, 41.0042572397971], [-95.8179044723511, 41.0032856367545], [-95.817174911499, 41.0025731187526], [-95.8152008056641, 41.0024111817688], [-95.8140420913696, 41.0028322170991], [-95.81627368927, 41.0046134906571], [-95.8176898956299, 41.0056498458448]]

out_points = [[-95.8193635940552, 41.0129038758068], [-95.8218097686768, 41.0130657870063], [-95.8228826522827, 41.0119000174887], [-95.8237838745117, 41.0105399269802], [-95.8245992660522, 41.0094388807662], [-95.8248996734619, 41.0079168159972], [-95.8250713348389, 41.0057793890973], [-95.8250713348389, 41.0039009870114], [-95.8233976364136, 41.0047430359468], [-95.8213806152344, 41.0071071927528], [-95.8201789855957, 41.0094388807662], [-95.8179903030396, 41.0117057205636], [-95.8126258850098, 41.0110256768135], [-95.808162689209, 41.0107666106814], [-95.8079051971436, 41.0123209921941], [-95.8193635940552, 41.0129038758068], [-95.8236122131348, 41.003091314427], [-95.8249855041504, 41.0019253684299], [-95.8249855041504, 40.9997877471958], [-95.8235263824463, 40.9977796156103], [-95.8193635940552, 40.9971642082001], [-95.8149433135986, 40.9953179514964], [-95.8091926574707, 40.9967431366616], [-95.8089351654053, 41.0000468564923], [-95.8184623718262, 41.0002087992855], [-95.8212089538574, 41.0019253684299], [-95.8236122131348, 41.003091314427], [-95.8074331283569, 41.0099894061731], [-95.8079051971436, 41.0069776521105], [-95.8079051971436, 41.0044839451126], [-95.8078193664551, 41.0022168568629], [-95.8072185516357, 40.9995286368806], [-95.8069610595703, 40.9978120053149], [-95.8051586151123, 40.9979415639739], [-95.8033990859985, 40.9988808566362], [-95.8033990859985, 41.0025731187526], [-95.8074331283569, 41.0099894061731]]

ring = GeoRuby::SimpleFeatures::LinearRing.from_coordinates(poly_points)
polygon = GeoRuby::SimpleFeatures::Polygon.from_linear_rings([ring])

def test_case(name, points, polygon)
	inside = 0
	points.each do |coord|
		point = GeoRuby::SimpleFeatures::Point.from_coordinates(coord)
		inside += 1 if polygon.contains(point)
	end
	printf "poly contains %s/%s points from '%s'\n", inside, points.length, name
end


test_case('internal points', in_points, polygon)
test_case('external points', out_points, polygon)
